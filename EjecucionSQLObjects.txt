-----------------------TERCERA ITERACION---------------------------
Mejorar tabla producto, producto por pedido, usuario, vendedor sobre el flujo de datos. (listo)
Relacionar 1 a muchos en las tablas de insumos, recetas y productos (listo)
Arreglar los campos de la tabla CATALOGO (listo)
Seguir poblando la base de datos. (En proceso)
Mejorar el index.jsp (front end)
Hacer las validaciones de registrar usuario y login.
Poner un datatable en cada tabla excepto el de reporte de ventas.
Levantar el proyecto con las imagenes de la BD.
En cuanto al catalogo: El minimo de articulos que se presente son 10. (bota excepcion)
					   En agregar articulos, insertar un registro en la tabla catalogo de acuerdo al codigo del producto. (insert/select/where codigo -> 1)
					   Arreglar lo del rating bar en una grilla.
					   Arreglar lo de la paginacion del catalogo.
En cuanto a preferencias: Mejorar el front-end. (si alcanza tiempo)
						  Si es posible, mostrar las imagenes de cada producto. (si alcanza tiempo)
						  No califique el mismo producto una vez calificado. (por mes se abre de nuevo) -> actualiza el catalogo, y se abre de nuevo.
						  Mostrar un aviso modal bottom o top en el que avisa el lapso de tiempo que se reinicia la temporada del catalogo. (contador)
-----------------------CUARTA ITERACION---------------------------						  
Hacer el generar pedido (carrito de compras)


INCIDENCIAS:
CONEXION A LA BASE DE DATOS EN EL NET BEANS
POSIBLEMENTE PORQUE NO CREA UNA CUENTA EN LA BD


PASOS: CONFIGURAR SERVIDOR TOMCAT DEL NETBEANS -> CREAR CUENTA ADMIN 1234 EN EL PHPMYADMIN -> IMPORTAR ARCHIVO .SQL
	 ->EJECUTAR DEL ARCHIVO EJECUCIONSQLOBJECT.TXT CADA OBJETO DE LA BD -> LEVANTAR LA PROGRA.

BASE64 - FIREBASE.

	 

-------------------------------------------------------------------------------------
CODIGO SQL QUE SE DEBE EJECUTAR
-------------------------------------------------------------------------------------
	 
CREATE VIEW lista_producto
AS
SELECT pro.codigo_producto, pro.nombre_producto, tiPro.nombre_tipo_producto, AVG(cliPref.cantidad_puntos) as promedioPuntaje, pro.ingreso_almacen_producto, pro.salida_almacen_producto, SUM(proPed.cantidad_producto) as cantidadUnidad
FROM producto as pro INNER JOIN tipo_producto as tiPro 
ON (tiPro.codigo_tipo_producto = pro.fkcodigo_tipo_producto) INNER JOIN producto_por_pedido as proPed 
ON (pro.codigo_producto = proPed.fkcodigo_producto) INNER JOIN cliente_tiene_preferencia as cliPref 
ON (cliPref.fkcodigo_producto = pro.codigo_producto)
GROUP BY pro.nombre_producto
ORDER BY promedioPuntaje DESC
	 
----------------------------------------------------------------------------------------------------------	 
/*posiblemente borrar*/

CREATE VIEW lista_catalogo
AS
SELECT pro.codigo_producto, pro.nombre_producto, tiPro.nombre_tipo_producto, tiPro.tiempoenhorno_tipo_producto, tiPro.temperaturaenhorno_tipo_producto,
	   proPed.valor_neto, proPed.valor_con_igv, pro.foto_producto, pro.preparacion_producto, pro.colores_producto,	ins.nombre_insumo, 
       recPro.modelo_receta_producto, SUM(proPed.cantidad_producto) as cantidadMasPedido, AVG(cliPref.cantidad_puntos) as promedioTotalProd
FROM producto as pro INNER JOIN tipo_producto as tiPro ON (pro.fkcodigo_tipo_producto = tiPro.codigo_tipo_producto) INNER JOIN
	 cliente_tiene_preferencia as cliPref ON (cliPref.fkcodigo_producto = pro.codigo_producto) INNER JOIN
     producto_por_pedido as proPed ON (proPed.fkcodigo_producto = pro.codigo_producto) INNER JOIN
     rece_produ_ti_insumo as interMedio ON (interMedio.fk_codigo_producto = pro.codigo_producto) INNER JOIN
     receta_producto as recPro ON (recPro.codigo_receta_producto = interMedio.fk_codigo_receta_producto) INNER JOIN
     insumo as ins ON (ins.codigo_insumo = interMedio.fk_codigo_insumo)
GROUP BY pro.codigo_producto, pro.nombre_producto
ORDER BY promedioTotalProd DESC
LIMIT 5

----------------------------------------------------------------------------------

drop trigger IF EXISTS tra_relacionEstadoCatalogo;
DELIMITER //
CREATE TRIGGER tra_relacionEstadoCatalogo
    BEFORE INSERT ON catalogo FOR EACH ROW 
BEGIN  
    SET NEW.fkcodigo_estadoCatalogo = 1;
END
//
DELIMITER ;

----------------------------------------------------------------------------------

DELIMITER //
CREATE PROCEDURE sp_catalogo()
BEGIN
	SET FOREIGN_KEY_CHECKS = 0;
    SET AUTOCOMMIT = 0;
    START TRANSACTION;

    DELETE FROM catalogo;
    ALTER TABLE catalogo AUTO_INCREMENT = 1;
    
    SET FOREIGN_KEY_CHECKS = 1;
    COMMIT;
    SET AUTOCOMMIT = 1 ;
    
    INSERT INTO catalogo(cat_codigo_producto, cat_nombre_producto, cat_nombre_tipo_producto, cat_tiempoenhorno_tipo_producto, 
                         cat_temperaturaenhorno_tipo_producto, cat_valor_neto, cat_valor_con_igv, cat_foto_producto, cat_preparacion_producto,
                         cat_colores_producto, cat_nombre_insumo, cat_modelo_receta_producto, cantidadMasPedido, promedioTotalProd)
    SELECT pro.codigo_producto, pro.nombre_producto, tiPro.nombre_tipo_producto, tiPro.tiempoenhorno_tipo_producto, tiPro.temperaturaenhorno_tipo_producto,
	   	   proPed.valor_neto, proPed.valor_con_igv, pro.foto_producto, pro.preparacion_producto, pro.colores_producto,	ins.nombre_insumo, 
           recPro.modelo_receta_producto, SUM(proPed.cantidad_producto) as cantidadMasPedido, AVG(cliPref.cantidad_puntos) as promedioTotalProd
    FROM producto as pro INNER JOIN tipo_producto as tiPro ON (pro.fkcodigo_tipo_producto = tiPro.codigo_tipo_producto) INNER JOIN
         cliente_tiene_preferencia as cliPref ON (cliPref.fkcodigo_producto = pro.codigo_producto) INNER JOIN
         producto_por_pedido as proPed ON (proPed.fkcodigo_producto = pro.codigo_producto) INNER JOIN
         rece_produ_ti_insumo as interMedio ON (interMedio.fk_codigo_producto = pro.codigo_producto) INNER JOIN
		 receta_producto as recPro ON (recPro.codigo_receta_producto = interMedio.fk_codigo_receta_producto) INNER JOIN
		 insumo as ins ON (ins.codigo_insumo = interMedio.fk_codigo_insumo)
    GROUP BY pro.codigo_producto, pro.nombre_producto
    ORDER BY promedioTotalProd DESC
    LIMIT 5;
    
	ALTER TABLE catalogo AUTO_INCREMENT = 6;
	
    END
//
DELIMITER ;

--------------------------------------------------------------------------------------------

DELIMITER //
CREATE PROCEDURE sp_cambiaEstadoArticulo(IN codigoProducto INT)
BEGIN
	UPDATE catalogo SET catalogo.fkcodigo_estadoCatalogo = 2 WHERE catalogo.cat_codigo_producto = codigoProducto;
END
//
DELIMITER ;

------------------------------------------------------------------------------------------------

DELIMITER //
CREATE PROCEDURE sp_agregaArticulo(IN codigoProducto INT)
BEGIN
	UPDATE catalogo SET catalogo.fkcodigo_estadoCatalogo = 1 WHERE catalogo.cat_codigo_producto = codigoProducto;
END
//
DELIMITER ;

-----------------------------------------------------------------------------------------------

DELIMITER //
CREATE PROCEDURE sp_insertaArtCat(IN codigoProducto INT)
BEGIN

INSERT INTO catalogo(cat_codigo_producto, cat_nombre_producto, cat_nombre_tipo_producto, cat_tiempoenhorno_tipo_producto, 
                     cat_temperaturaenhorno_tipo_producto, cat_valor_neto, cat_valor_con_igv, cat_foto_producto, cat_preparacion_producto,
                     cat_colores_producto, cat_nombre_insumo, cat_modelo_receta_producto, cantidadMasPedido, promedioTotalProd)
SELECT pro.codigo_producto, pro.nombre_producto, tiPro.nombre_tipo_producto, tiPro.tiempoenhorno_tipo_producto, tiPro.temperaturaenhorno_tipo_producto,
	   	   proPed.valor_neto, proPed.valor_con_igv, pro.foto_producto, pro.preparacion_producto, pro.colores_producto,	ins.nombre_insumo, 
           recPro.modelo_receta_producto, SUM(proPed.cantidad_producto) as cantidadMasPedido, AVG(cliPref.cantidad_puntos) as promedioTotalProd
    FROM producto as pro INNER JOIN tipo_producto as tiPro ON (pro.fkcodigo_tipo_producto = tiPro.codigo_tipo_producto) INNER JOIN
         cliente_tiene_preferencia as cliPref ON (cliPref.fkcodigo_producto = pro.codigo_producto) INNER JOIN
         producto_por_pedido as proPed ON (proPed.fkcodigo_producto = pro.codigo_producto) INNER JOIN
         rece_produ_ti_insumo as interMedio ON (interMedio.fk_codigo_producto = pro.codigo_producto) INNER JOIN
		 receta_producto as recPro ON (recPro.codigo_receta_producto = interMedio.fk_codigo_receta_producto) INNER JOIN
		 insumo as ins ON (ins.codigo_insumo = interMedio.fk_codigo_insumo)
    WHERE (pro.codigo_producto = codigoProducto)
    GROUP BY pro.codigo_producto, pro.nombre_producto;

END
//
DELIMITER ;

-----------------------------------------------------------------------------------------------

DELIMITER //
CREATE PROCEDURE sp_calificaProducto(IN codigoUsuario int, IN codigoProducto int, IN cantidadPuntos float)
BEGIN
	DECLARE idCliente int(14);
    SET idCliente = (SELECT cli.codigo_cliente 
                      FROM cliente as cli INNER JOIN usuario as usu ON (usu.codigo_usuario = cli.fkcodigo_usuario)
                      WHERE (usu.codigo_usuario = codigoUsuario));
    
    INSERT INTO cliente_tiene_preferencia(`fkcodigo_cliente`,`fkcodigo_producto`,`fecha_voto_preferencia`,`cantidad_puntos`) 
    VALUES(idCliente,codigoProducto,CURRENT_DATE,cantidadPuntos);
END
//
DELIMITER ;

-----------------------------------------------------------------------------------------------------------

DELIMITER //
CREATE PROCEDURE sp_cambiaEstadoPedido(IN codigoPedido int, IN fkCodEstadoPedido int)
BEGIN
	UPDATE cliente_tiene_pedido SET fkcodigo_estado_cliente_tiene_pedido = fkCodEstadoPedido
	WHERE codigo_pedido_web = codigoPedido;
END
//
DELIMITER ;

---------------------------------------------------------------------------------------------------------------
NUEVA INSERCCION DE DATOS

INSERT INTO `usuario` (`codigo_usuario`, `nombre_usuario`, `apellido_usuario`, `fecha_nacimiento_usuario`, `direccion_usuario`, `nombre_logeo_usuario`, `password_usuario`, `foto_usuario`, `fkcodigo_distrito`, `fkcodigo_tipo_usuario`, `fkcodigo_estado_usuario`, `version`) VALUES
(18, 'Lorena', 'Bartolo', '1995-02-01 00:00:00', 'Vittore Carpaccio', 'Cariel12', '1234', NULL, 6, 4, 1, '2018-06-07 19:20:29'),
(19, 'Sebastian', 'Miranda', '1997-06-06 00:00:00', 'Av. Los alamos 859', 'Sebasmira', '123', NULL, 4, 4, 1, '2018-06-07 19:20:29');

INSERT INTO `cliente` (`codigo_cliente`, `razonsocial_cliente`, `fkcodigo_usuario`, `fkcodigo_regimen_cliente`, `fkcodigo_estado_cliente`, `latitud_cliente`, `longitud_cliente`, `type_cliente`, `foto_ubicacion_cliente`, `ruc_cliente`, `dni_cliente`, `fecha_empadronamiento_cliente`, `version`) VALUES
(8, 'Bo concept', 18, 1, 1, NULL, NULL, NULL, NULL, '20123684295', '07863541', '2018-01-10 00:00:00', '2018-06-07 19:32:46'),
(9, 'Duomo', 19, 1, 1, NULL, NULL, NULL, NULL, '20143698751', '76541298', '2017-06-15 00:00:00', '2018-06-07 19:32:46');

INSERT INTO `cliente_tiene_pedido` (`codigo_pedido_web`, `fkcodigo_cliente`, `fkcodigo_vendedor`, `fkcodigo_igv_venta`, `fkcodigo_promocion_venta`, `fkcodigo_estado_cliente_tiene_pedido`, `fkcodigo_factura_cliente_tiene_pedido`, `descuento_web_pedido`, `precio_uni_desc_igv`, `precio_uni_desc_sin_igv`, `fecha_pedido`, `fecha_entrega`, `cantidad_producto`, `monto_por_descuentos`, `version`) VALUES
(8, 3, 4, 1, 3, 5, 6, 20, 141.6, 120, '2018-05-16 00:00:00', '2018-05-23 00:00:00', 30, 30, '2018-06-07 19:05:05'),
(9, 6, 2, 1, 7, 5, 7, 25, 99.12, 84, '2018-05-03 00:00:00', '2018-05-10 00:00:00', 35, 35, '2018-06-07 19:05:05'),
(10, 8, 1, 1, 9, 3, 12, 15, 87.32, 74, '2018-06-07 00:00:00', '2018-06-14 00:00:00', 15, 15, '2018-06-07 19:49:09'),
(11, 9, 3, 1, 1, 3, 10, 40, 120.36, 102, '2018-06-07 00:00:00', '2018-06-14 00:00:00', 20, 20, '2018-06-07 19:49:09'),
(12, 4, 4, 1, 3, 5, 11, 20, 97.94, 83, '2018-06-07 00:00:00', '2018-06-14 00:00:00', 30, 30, '2018-06-07 19:59:51'),
(13, 2, 2, 1, 2, 4, 9, 30, 113.28, 96, '2018-06-06 00:00:00', '2018-06-13 00:00:00', 25, 25, '2018-06-07 19:59:51'),
(14, 8, 1, 1, 3, 3, 13, 20, 92.04, 78, '2018-06-02 00:00:00', '2018-06-09 00:00:00', 30, 30, '2018-06-07 20:19:20'),
(15, 5, 2, 1, 5, 2, 14, 10, 77.88, 66, '2018-06-04 00:00:00', '2018-06-11 00:00:00', 50, 50, '2018-06-07 20:19:20');

INSERT INTO `producto_por_pedido` (`codigo_producto_por_pedido`, `fkcodigo_pedido_web`, `fkcodigo_producto`, `descuento_promocion`, `valor_neto`, `valor_con_igv`, `cantidad_producto`, `version`) VALUES
(10, 11, 7, 30, 150, 177, 25, '2018-06-07 20:03:23'),
(11, 5, 3, 10, 180, 212.4, 60, '2018-06-07 20:00:32'),
(12, 5, 10, 15, 125, 147.5, 10, '2018-06-07 20:00:32'),
(13, 13, 11, 20, 160, 188.8, 30, '2018-06-07 20:03:23'),
(14, 2, 9, 40, 250, 295, 20, '2018-06-07 20:00:32'),
(15, 1, 1, 10, 350, 413, 45, '2018-06-07 20:00:32'),
(16, 8, 5, 15, 145, 171.1, 15, '2018-06-07 20:03:23'),
(17, 7, 8, 25, 420, 495.6, 30, '2018-06-07 20:00:32'),
(18, 6, 2, 15, 375, 442.5, 55, '2018-06-07 20:00:32'),
(19, 9, 4, 20, 190, 224.2, 30, '2018-06-07 20:03:23'),
(20, 1, 12, 25, 135, 159.3, 35, '2018-06-07 20:00:32'),
(21, 3, 7, 45, 175, 206.5, 10, '2018-06-07 20:00:32'),
(22, 5, 9, 10, 245, 289.1, 50, '2018-06-07 20:00:32'),
(23, 12, 1, 10, 325, 383.5, 50, '2018-06-07 20:03:23'),
(24, 10, 11, 30, 225, 265.5, 25, '2018-06-07 20:03:23'),
(25, 11, 4, 15, 165, 194.7, 10, '2018-06-07 20:03:23'),
(26, 14, 2, 30, 215, 253.7, 20, '2018-06-07 20:25:10'),
(27, 15, 5, 35, 205, 241.9, 25, '2018-06-07 20:25:10'),
(28, 8, 4, 10, 315, 371.7, 50, '2018-06-07 20:25:10'),
(29, 9, 3, 10, 245, 289.1, 60, '2018-06-07 20:25:10'),
(30, 14, 6, 10, 325, 383.5, 45, '2018-06-07 20:25:11');




