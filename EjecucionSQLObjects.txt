-----------------------TERCERA ITERACION---------------------------
Mejorar tabla producto, producto por pedido, usuario, vendedor sobre el flujo de datos. (listo)
Relacionar 1 a muchos en las tablas de insumos, recetas y productos (listo)
Arreglar los campos de la tabla CATALOGO (listo)
Seguir poblando la base de datos. (En proceso)
Mejorar el index.jsp (front end)
Hacer las validaciones de registrar usuario y login.
Poner un datatable en cada tabla excepto el de reporte de ventas.
Levantar el proyecto con las imagenes de la BD.
En cuanto al catalogo: El minimo de articulos que se presente son 10. (bota excepcion)
					   En agregar articulos, insertar un registro en la tabla catalogo de acuerdo al codigo del producto. (insert/select/where codigo -> 1)
					   Arreglar lo del rating bar en una grilla.
					   Arreglar lo de la paginacion del catalogo.
En cuanto a preferencias: Mejorar el front-end. (si alcanza tiempo)
						  Si es posible, mostrar las imagenes de cada producto. (si alcanza tiempo)
						  No califique el mismo producto una vez calificado. (por mes se abre de nuevo) -> actualiza el catalogo, y se abre de nuevo.
						  Mostrar un aviso modal bottom o top en el que avisa el lapso de tiempo que se reinicia la temporada del catalogo.
-----------------------CUARTA ITERACION---------------------------						  
Hacer el generar pedido (carrito de compras)


INCIDENCIAS:
CONEXION A LA BASE DE DATOS EN EL NET BEANS
POSIBLEMENTE PORQUE NO CROE UNA CUENTA EN LA BD


-------------------------------------------------------------------------------------
CODIGO SQL QUE SE DEBE EJECUTAR
-------------------------------------------------------------------------------------
	 
CREATE VIEW lista_producto
AS
SELECT pro.codigo_producto, pro.nombre_producto, tiPro.nombre_tipo_producto, AVG(cliPref.cantidad_puntos) as promedioPuntaje, pro.ingreso_almacen_producto, pro.salida_almacen_producto, SUM(proPed.cantidad_producto) as cantidadUnidad
FROM producto as pro INNER JOIN tipo_producto as tiPro 
ON (tiPro.codigo_tipo_producto = pro.fkcodigo_tipo_producto) INNER JOIN producto_por_pedido as proPed 
ON (pro.codigo_producto = proPed.fkcodigo_producto) INNER JOIN cliente_tiene_preferencia as cliPref 
ON (cliPref.fkcodigo_producto = pro.codigo_producto)
GROUP BY pro.nombre_producto
ORDER BY promedioPuntaje DESC
	 
----------------------------------------------------------------------------------------------------------	 

CREATE VIEW lista_catalogo
AS
SELECT pro.codigo_producto, pro.nombre_producto, tiPro.nombre_tipo_producto, tiPro.tiempoenhorno_tipo_producto, tiPro.temperaturaenhorno_tipo_producto,
	   proPed.valor_neto, proPed.valor_con_igv, pro.foto_producto, pro.preparacion_producto, pro.colores_producto,	ins.nombre_insumo, 
       recPro.modelo_receta_producto, SUM(proPed.cantidad_producto) as cantidadMasPedido, AVG(cliPref.cantidad_puntos) as promedioTotalProd
FROM producto as pro INNER JOIN tipo_producto as tiPro ON (pro.fkcodigo_tipo_producto = tiPro.codigo_tipo_producto) INNER JOIN
	 cliente_tiene_preferencia as cliPref ON (cliPref.fkcodigo_producto = pro.codigo_producto) INNER JOIN
     producto_por_pedido as proPed ON (proPed.fkcodigo_producto = pro.codigo_producto) INNER JOIN
     rece_produ_ti_insumo as interMedio ON (interMedio.fk_codigo_producto = pro.codigo_producto) INNER JOIN
     receta_producto as recPro ON (recPro.codigo_receta_producto = interMedio.fk_codigo_receta_producto) INNER JOIN
     insumo as ins ON (ins.codigo_insumo = interMedio.fk_codigo_insumo)
GROUP BY pro.codigo_producto, pro.nombre_producto
ORDER BY promedioTotalProd DESC
LIMIT 10

----------------------------------------------------------------------------------

drop trigger IF EXISTS tra_relacionEstadoCatalogo;
DELIMITER //
CREATE TRIGGER tra_relacionEstadoCatalogo
    BEFORE INSERT ON catalogo FOR EACH ROW 
BEGIN  
    SET NEW.fkcodigo_estadoCatalogo = 1;
END
//
DELIMITER ;


DELIMITER //
CREATE PROCEDURE sp_catalogo()
BEGIN
	SET FOREIGN_KEY_CHECKS = 0;
    SET AUTOCOMMIT = 0;
    START TRANSACTION;

    DELETE FROM catalogo;
    ALTER TABLE catalogo AUTO_INCREMENT = 1;
    
    SET FOREIGN_KEY_CHECKS = 1;
    COMMIT;
    SET AUTOCOMMIT = 1 ;
    
    INSERT INTO catalogo(cat_codigo_producto, cat_nombre_producto, cat_nombre_tipo_producto, cat_tiempoenhorno_tipo_producto, 
                         cat_temperaturaenhorno_tipo_producto, cat_valor_neto, cat_valor_con_igv, cat_foto_producto, cat_preparacion_producto,
                         cat_colores_producto, cat_nombre_insumo, cat_modelo_receta_producto, cantidadMasPedido, promedioTotalProd)
    SELECT pro.codigo_producto, pro.nombre_producto, tiPro.nombre_tipo_producto, tiPro.tiempoenhorno_tipo_producto, tiPro.temperaturaenhorno_tipo_producto,
	   	   proPed.valor_neto, proPed.valor_con_igv, pro.foto_producto, pro.preparacion_producto, pro.colores_producto,	ins.nombre_insumo, 
           recPro.modelo_receta_producto, SUM(proPed.cantidad_producto) as cantidadMasPedido, AVG(cliPref.cantidad_puntos) as promedioTotalProd
    FROM producto as pro INNER JOIN tipo_producto as tiPro ON (pro.fkcodigo_tipo_producto = tiPro.codigo_tipo_producto) INNER JOIN
         cliente_tiene_preferencia as cliPref ON (cliPref.fkcodigo_producto = pro.codigo_producto) INNER JOIN
         producto_por_pedido as proPed ON (proPed.fkcodigo_producto = pro.codigo_producto) INNER JOIN
         rece_produ_ti_insumo as interMedio ON (interMedio.fk_codigo_producto = pro.codigo_producto) INNER JOIN
		 receta_producto as recPro ON (recPro.codigo_receta_producto = interMedio.fk_codigo_receta_producto) INNER JOIN
		 insumo as ins ON (ins.codigo_insumo = interMedio.fk_codigo_insumo)
    GROUP BY pro.codigo_producto, pro.nombre_producto
    ORDER BY promedioTotalProd DESC
    LIMIT 10;
    
    END
//
DELIMITER ;

--------------------------------------------------------------------------------------------

DELIMITER //
CREATE PROCEDURE sp_cambiaEstadoArticulo(IN codigoProducto INT)
BEGIN
	UPDATE catalogo SET catalogo.fkcodigo_estadoCatalogo = 2 WHERE catalogo.cat_codigo_producto = codigoProducto;
END
//
DELIMITER ;

----------------------------------------------------------------------------------------------

DELIMITER //
CREATE PROCEDURE sp_agregaArticulo(IN codigoProducto INT)
BEGIN
	UPDATE catalogo SET catalogo.fkcodigo_estadoCatalogo = 1 WHERE catalogo.cat_codigo_producto = codigoProducto;
END
//
DELIMITER ;

-----------------------------------------------------------------------------------------------

DELIMITER //
CREATE PROCEDURE sp_calificaProducto(IN codigoUsuario int, IN codigoProducto int, IN cantidadPuntos float)
BEGIN
	DECLARE idCliente int(14);
    SET idCliente = (SELECT cli.codigo_cliente 
                      FROM cliente as cli INNER JOIN usuario as usu ON (usu.codigo_usuario = cli.fkcodigo_usuario)
                      WHERE (usu.codigo_usuario = codigoUsuario));
    
    INSERT INTO cliente_tiene_preferencia(`fkcodigo_cliente`,`fkcodigo_producto`,`fecha_voto_preferencia`,`cantidad_puntos`) 
    VALUES(idCliente,codigoProducto,CURRENT_DATE,cantidadPuntos);
END
//
DELIMITER ;

-----------------------------------------------------------------------------------------------------------

DELIMITER //
CREATE PROCEDURE sp_cambiaEstadoPedido(IN codigoPedido int, IN fkCodEstadoPedido int)
BEGIN
	UPDATE cliente_tiene_pedido SET fkcodigo_estado_cliente_tiene_pedido = fkCodEstadoPedido
	WHERE codigo_pedido_web = codigoPedido;
END
//
DELIMITER ;

---------------------------------------------------------------------------------------------------------------

